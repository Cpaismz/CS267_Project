######################################################################################################################################
#
#				FireSimulator FBP serial and parallel version 1.0b - July 2017 
#				Author: Cristobal Pais
#				example: mpiexec -n X python Path\Simulator1Beta.py  where X is the number of parallel processes
#
######################################################################################################################################

import pandas as pd
import matplotlib.pyplot as plt
#from argparse import ArgumentParser
import math

# Reads fbp_lookup_table.csv and creates dictionaries for the fuel types and cells' colors
def Dictionary(filename):
	aux = 1
	file = open(filename, "r") 
	row = {}
	colors = {} 
	all = {}
	
	# Read file and save colors and ftypes dictionaries
	for line in file: 
		if aux >1:
			aux +=1
			line = line.replace("-","")
			line = line.replace("\n","")
			line = line.replace("No","NF")
			line = line.split(",")
			
			row[line[0]] = line[3][0:2]
			colors[line[0]] = (float(line[4])/255.0,float(line[5])/255.0,float(line[6])/255.0,1.0)#,line[7],line[8],line[9]]
			all[line[0]] = line
	
		if aux == 1:
			aux +=1
		
	
	
	return row,colors
	
# Reads the ASCII file with the forest grid structure and returns an array with all the cells and grid dimensions nxm	
def ForestGrid(filename,Dictionary):
	AdjCells = []
	North = "N"
	South = "S"
	East = "E"
	West = "W"
	NorthEast = "NE"
	NorthWest = "NW"
	SouthEast = "SE"
	SouthWest = "SW"
	
	CoordCells = []
	
	cells = 0
	file = open(filename, "r") 
	row = 1
	trows = 0 
	tcols = 0
	gridcell1 = []
	gridcell2 = []
	gridcell3 = []
	gridcell4 = []
	grid = []
	grid2 = []
	
	# Read the ASCII file with the grid structure
	for line in file: 
		if row >=7:
			row +=1
			line = line.replace("\n","")
			line = line.split(" ")
			
			for c in range(0,len(line)-1):
				if line[c] not in Dictionary.keys():
					gridcell1.append("NData")
					gridcell2.append("NData")
					gridcell3.append("NData")
					gridcell4.append("NData")
				else:
					gridcell1.append(line[c])
					gridcell2.append(Dictionary[line[c]])
					gridcell3.append(int(line[c]))
					gridcell4.append(Dictionary[line[c]])
				tcols = max(tcols,len(line))
						
			grid.append(gridcell1)
			grid2.append(gridcell2)
			gridcell1 = []
			gridcell2 = []
						
		if row< 7:
			row +=1
			
	# Adjacent list
	n = 1
	for r in range(0,len(grid)):
		for c in range(0,tcols-1):
			CoordCells.append([c,len(grid)-r-1])
			
			if len(grid) >1:
				
				if r == 0:
					if c == 0:
						AdjCells.append({North:None,NorthEast:None,NorthWest:None, South:[n+tcols-1], SouthEast:[n+tcols], SouthWest:None, East:[n+1],West:None})
						n+=1
					if c == tcols-2:
						AdjCells.append({North:None,NorthEast:None,NorthWest:None,South:[n+tcols-1],SouthEast:None,SouthWest:[n+tcols-2] , East:None, West:[n-1]})
						n+=1
					if c>0 and c<tcols-2:	
						AdjCells.append({North:None,NorthEast:None,NorthWest:None,South:[n+tcols-1],SouthEast:[n+tcols] , SouthWest:[n+tcols-2], East:[n+1],West:[n-1]})
						n+=1
				
				if r >0 and r<len(grid)-1:
					if c == 0:
						AdjCells.append({North:[n-tcols+1],NorthEast:[n-tcols+2],NorthWest:None,South:[n+tcols-1],SouthEast:[n+tcols],SouthWest:None,East:[n+1],West:None})
						n+=1
					if c == tcols-2:
						AdjCells.append({North:[n-tcols+1],NorthEast:None,NorthWest:[n-tcols],South:[n+tcols-1],SouthEast:None,SouthWest:[n+tcols-2],East:None,West:[n-1]})
						n+=1
					if c>0 and c<tcols-2:	
						AdjCells.append({North:[n-tcols+1],NorthEast:[n-tcols+2],NorthWest:[n-tcols],South:[n+tcols-1],SouthEast:[n+tcols] , SouthWest:[n+tcols-2],East:[n+1],West:[n-1]})
						n+=1		
				
				if r == len(grid)-1:
					if c == 0:
						AdjCells.append({North:[n-tcols+1],NorthEast:[n-tcols+2],NorthWest:None,South:None,SouthEast:None , SouthWest:None,East:[n+1],West:None})
						n+=1
					if c == tcols-2:
						AdjCells.append({North:[n-tcols+1],NorthEast:None,NorthWest:[n-tcols],South:None,SouthEast:None , SouthWest:None,East:None,West:[n-1]})
						n+=1
					if c>0 and c<tcols-2:	
						AdjCells.append({North:[n-tcols+1],NorthEast:[n-tcols+2],NorthWest:[n-tcols],South:None,SouthEast:None , SouthWest:None,East:[n+1],West:[n-1]})
						n+=1
			
			if len(grid)==1:
				if c == 0:
					AdjCells.append({North:None,NorthEast:None,NorthWest:None,South:None,SouthEast:None , SouthWest:None,East:[n+1],West:None})
					n+=1
				if c == tcols-2:
					AdjCells.append({North:None,NorthEast:None,NorthWest:None,South:None,SouthEast:None , SouthWest:None,East:None,West:[n-1]})
					n+=1
				if c>0 and c<tcols-2:	
					AdjCells.append({North:None,NorthEast:None,NorthWest:None,South:None,SouthEast:None , SouthWest:None,East:[n+1],West:[n-1]})
					n+=1
	
	#print "Adjacents:",AdjCells
	return gridcell3,gridcell4,len(grid),tcols-1,AdjCells,CoordCells

# Reads fbp_lookup_table.csv and creates dictionaries for the fuel types and cells' colors (Pandas' version - not ready)	
def Dictionary_PD(filename):
	pd.set_option('display.mpl_style','default')
	plt.rcParams['figure.figsize'] = (15, 5)
	fbplookuptableDF = pd.read_csv(filename,sep=",",index_col="grid_value")
	fbplookuptableDF["export_value"]
	fbplookuptableDF
	
# Reads IgnitionPoints.csv file and creates an array with them 
def IgnitionPoints(filename):
	#Ignitions is a dictionary with years = keys and ncell = values
	aux = 1
	file = open(filename, "r") 
	ignitions = {}
	for line in file:
		if aux > 1:
			line = line.replace("\n","")
			line = line.split(",")
			ignitions[int(line[0])] = int(line[1])
		if aux==1:
			aux+=1	
	return ignitions		
	
def ReadThresholds(filename,nooutput):
	#Reads thresholds file
	Thresholds = {}
	file = open(filename, "r") 
	aux = 1
	
	for line in file:
		if aux > 1:
			line = line.replace("\n","")
			line = line.split(",")
					
		if aux == 1:
			aux+=1
	
	Thresholds["TEMP"] = float(line[0])
	Thresholds["RH"] = float(line[1])
	Thresholds["WS"] = float(line[2])
	Thresholds["PRECIP"] = float(line[3])
	Thresholds["ROS"] = float(line[4])
	
	if len(line) >=6:
		Thresholds["PROB"] = float(line[5])
	else: 
		Thresholds["PROB"] = 0.2
	
	if len(line) >=7:
		Thresholds["SPOT"] = float(line[6])
	else: 
		Thresholds["SPOT"] = 10
	
	if len(line) >=8:
		Thresholds["SPTANGLE"] = float(line[7])
	else: 
		Thresholds["SPTANGLE"] = 30
	
	
	if nooutput == False:
		print "---- Custom Thresholds ----"
		for i in Thresholds:
			print i,":",Thresholds[i]
		print "......................"	
	return Thresholds