dlw January 2018

====
This version reads spotting parameters from a file
	#Reads spotting parameters json file and returns dictionary
        # As of Jan 2018 the dictionary should have "SPOT" and "SPTANGLE"

    parser.add_argument("--spotting-parameter-data-file-name",
                    help="Spotting parameter data file name (default None)",
                    dest="spotting_parameter_data_file_name",
                    default=None,
                    action='store_true')                

====
We no longer read custom thresholds and the --custom-thresholds
   option has been removed.

    old: def manageFire(self,period,Weather,AvailSet,verbose,df,coef,WeatherOpt,spotting,Cells_Obj,Thresholds,CoordCells, PeriodLen):
    new: replaces it

Old code therein:
            # Check a threshold for the ROS
            if headstruct.ros > 1e-3:
                if verbose == True:
                    print ""
                    print "ROS value is enough for sending messages"
                    
new code uses:
,args.ROS_Message_Threshold

    parser.add_argument("--ROS-Message-Threshold",
                    help="A cell will not send messages if head ros is not above this value.",
                    dest="ROS_Message_Threshold",
                    type=float,
                    default=None)                

same routine: do someting about psm
xxxx

-------------------
    def ignition(self,period,Weather,Season,IgnitionPoints):


This is where a major change is.


====
old and gone:
send_message

====
    very old? and gone
    def got_burnt(self,period,Weather,NMsg,Season,verbose):

====
    very old?
    def got_burnt_from(self,period,MsgLists,verbose):

====
new in Oct
    def get_burned(self, period,Weather,NMsg,Season,verbose,df,coef,Thresholds):

old:
        # Check a threshold for the ROS
        if headstruct.ros > 1e-3:
            if verbose == True:
                print ""
                print "ROS value is enough for burning"

    xxxx dlw: this is OK, but move threshold (hardwired at 1e-3) to parameters?
    new:
    parser.add_argument("--ROS-Message-Threshold",
                    help="A cell will not send messages if head ros is not above this value.",
                    dest="ROS_Message_Threshold",
                    type=float,
                    default=None)                
--------------------
sample spot json file contents:
{"SPOT": 5, "SPTANGLE": 30}


======================================
input changes:
    parser.add_argument("--input-instance-folder",
                    help="The path to the folder contains all the files for the simulation",
                    dest="input_folder",
                    type=str,
                    default=None)                
                    
    parser.add_argument("--output-folder",
                    help="The path to the folder for simulation output files",
                    dest="input_folder",
                    type=str,
                    default=None)                
                    
====================================

----------------------
got_burnt_from_mem(Fire_Period[Year-1],SendMessageList,Year-1,verbose)
???
----
comment help needed
get_burned (called from deep in Step 3: receiving messages;
            seems to indicate that the cell has burned (or is burning????))

ignition (seems to be initial ignition only;
          i.e. ignites a fire, not "cell ignition as part of an ongoing fire")

-------------------------
With respect to the Oct2017 version:
The time decay in the loop in CellsFBP ends randomly.
  When it ends, shouldn't the cell be declared to burned up; i.e.,
  if a cell starts burning, let's say it always is burned up.
Related: currently the BurningCells_Set only gets cleared at
year end so manage fire keeps getting called even after the
cell is "burned out" or "Burned up," which is sort of harmless
cause the psm (prob send message) will be nearly zero if the
fire is too old.

----------------------------
With respect to the Jan 2018 version: I properly update BurningCells_Set

In the Oct version of managefire, if the roll of the dice is below
psm, then the message list and the aux list will be empty,
so *maybe* the cell should be removed from the burning list.
What is happening is that they can keep burning as long
as some other cell happened to meet the psm test.

I'm going to change to a more explicit burn out. So psm will be
used more for burnout.

TBD: Time periods, cell sizes, thresholds and burnout calcs need to
be "in sync."

TBD: We should be able to drop "repeat fire" and just use the burningcells
set to see that there are no cells still burning.

-----------------------

change:
    parser.add_argument("--weather",
                        help="The 'type' of weather: constant, random, date-based (default random)",
                    dest="input_weather",

if constant and --weather-file, us the first row and give warnings

----------------------------
Feb 9: hours seems to be fairly entrenched, so I will convert ROS to m/hour
and I think FBP returns ROS m/min... use the user option --PeriodLen

BTW: I assume wind is given in m/s for documentation purposes

NOTE: the fire spread rate is limited by the fire time step (hours right now)

----------------------------
The old version had random update of slope az. which I removed (kept rand wind
speed and wind az. when rand weather option is chosen)

----------------------------
